version: 2
jobs:
  generate_dockerfiles:
    working_directory: ~/repo
    docker:
      - image: gcc:7

    steps:
      - checkout

      - run:
          name: Generate Dockerfiles
          command: make -j

      - run:
          name: Prepare Artifacts
          command: |
            mkdir /tmp/dockerfiles
            find . -name Dockerfile -type f | grep -v shared | xargs -I{} cp -v --parents {} /tmp/dockerfiles

      - store_artifacts:
          path: /tmp/dockerfiles
          destination: Dockerfiles

      # upload Dockerfiles to circleci-public/circleci-dockerfiles repo
      - add_ssh_keys:
          fingerprints:
            - "af:0a:93:75:51:75:1f:16:90:d9:97:b1:7a:bb:f0:27"

      - run:
          name: git config
          command: |
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
            git config --global user.name "$CIRCLE_USERNAME"

      - run: git clone git@github.com:CircleCI-Public/circleci-dockerfiles.git

      # only push Dockerfiles to github on circleci-images pushes to "master" or "production"
      - run:
          name: branch control flow & git push
          working_directory: circleci-dockerfiles
          command: |
            if [[ "$CIRCLE_BRANCH" == "production" ]]
            then
              export DOCKERFILES_BRANCH=master
            fi
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
              export DOCKERFILES_BRANCH=staging
            fi
            if [ ! -e $DOCKERFILES_BRANCH ]
            then
              git checkout $DOCKERFILES_BRANCH
              cp -rfv /tmp/dockerfiles/* ~/repo/circleci-dockerfiles
              git add .
              git commit --allow-empty -m "Dockerfiles from $CIRCLE_BUILD_URL"
              git push -f origin $DOCKERFILES_BRANCH
            fi

  generate_automated_build_images:
    working_directory: ~/repo
    docker:
      - image: gcc:7

    steps:
      - checkout

      - run:
          name: Generate Dockerfiles, READMEs for automated builds
          command: |
            make -j
            mkdir /tmp/example-images
            make example_images

      - store_artifacts:
          path: /tmp/example-images

      - add_ssh_keys:
          fingerprints:
            - "9c:e2:cf:bb:f2:25:4d:05:d9:b0:30:bf:73:c5:7d:8f"

      - run:
          name: git config
          command: |
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
            git config --global user.name "$CIRCLE_USERNAME"

      - run: git clone git@github.com:CircleCI-Public/example-images.git

      # only push example Dockerfiles/READMEs to github on circleci-images pushes to "master" or "production"
      - run:
          name: branch control flow & git push
          working_directory: example-images
          command: |
            if [[ "$CIRCLE_BRANCH" == "production" ]]
            then
              export DOCKERFILES_BRANCH=master
            fi
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
              export DOCKERFILES_BRANCH=staging
            fi
            if [ ! -e $DOCKERFILES_BRANCH ]
            then
              git checkout $DOCKERFILES_BRANCH
              cp -rfv /tmp/example-images/* ~/repo/example-images
              git add .
              git commit --allow-empty -m "example images from $CIRCLE_BUILD_URL"
              git push -f origin $DOCKERFILES_BRANCH
            fi

  refresh_tools_cache:
    docker:
      - image: circleci/python:latest

    steps:
      - checkout

      - run: sudo pip install awscli==1.14.17

      - run: cd ./shared/images; ./refresh-tools-cache

  publish_image: &publish_image
    machine: true
    working_directory: ~/circleci-bundles

    steps:
      - checkout

      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: Build and Publish Images
          command: |
            export COMPUTED_ORG=ccistaging
            if [[ "$CIRCLE_BRANCH" == "production" ]]
            then
              export COMPUTED_ORG=circleci
            fi
            export NEW_ORG=${NEW_ORG:-$COMPUTED_ORG}

            make -j $PLATFORM/publish_images

      - store_artifacts:
          path: "."
          destination: circleci-bundles

  publish_android:
    <<: *publish_image
    environment:
      - PLATFORM: android

  publish_node:
    <<: *publish_image
    environment:
      - PLATFORM: node

  publish_python:
    <<: *publish_image
    parallelism: 2
    environment:
      - PLATFORM: python

  publish_ruby:
    <<: *publish_image
    environment:
      - PLATFORM: ruby

  publish_golang:
    <<: *publish_image
    environment:
      - PLATFORM: golang

  publish_php:
    <<: *publish_image
    parallelism: 3
    environment:
      - PLATFORM: php

  publish_redis:
    <<: *publish_image
    environment:
      - PLATFORM: redis

  publish_postgres:
    <<: *publish_image
    environment:
      - PLATFORM: postgres

  publish_mariadb:
    <<: *publish_image
    environment:
      - PLATFORM: mariadb

  publish_mysql:
    <<: *publish_image
    environment:
      - PLATFORM: mysql

  publish_mongo:
    <<: *publish_image
    environment:
      - PLATFORM: mongo

  publish_elixir:
    <<: *publish_image
    environment:
      - PLATFORM: elixir

  publish_rust:
    <<: *publish_image
    environment:
      - PLATFORM: rust

  publish_jruby:
    <<: *publish_image
    environment:
      - PLATFORM: jruby

  publish_clojure:
    <<: *publish_image
    environment:
      - PLATFORM: clojure

  publish_openjdk:
    <<: *publish_image
    environment:
      - PLATFORM: openjdk

  publish_buildpack-deps:
    <<: *publish_image
    parallelism: 2
    environment:
      - PLATFORM: buildpack-deps

workflow_filters: &workflow_filters
  requires:
    - refresh_tools_cache
  filters:
    branches:
      only:
        - master
        - production
        - parallel

workflows:
  version: 2

  build_test_deploy:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - production
    jobs:
      - generate_dockerfiles
      - generate_automated_build_images:
          requires:
          - generate_dockerfiles
      - refresh_tools_cache:
          requires:
          - generate_dockerfiles
          filters:
            branches:
              only:
                - master
                - production
                - parallel
      - publish_android:  *workflow_filters
      - publish_node:     *workflow_filters
      - publish_python:   *workflow_filters
      - publish_ruby:     *workflow_filters
      - publish_golang:   *workflow_filters
      - publish_php:      *workflow_filters
      - publish_redis:    *workflow_filters
      - publish_postgres: *workflow_filters
      - publish_mariadb:  *workflow_filters
      - publish_mysql:    *workflow_filters
      - publish_mongo:    *workflow_filters
      - publish_elixir:   *workflow_filters
      - publish_jruby:    *workflow_filters
      - publish_clojure:  *workflow_filters
      - publish_openjdk:  *workflow_filters
      - publish_buildpack-deps:   *workflow_filters

  commit:
    jobs:
      - generate_dockerfiles
      - generate_automated_build_images:
          requires:
          - generate_dockerfiles
      - refresh_tools_cache:
          requires:
          - generate_dockerfiles
          filters:
            branches:
              only:
                - master
                - production
                - parallel
      - publish_android:  *workflow_filters
      - publish_node:     *workflow_filters
      - publish_python:   *workflow_filters
      - publish_ruby:     *workflow_filters
      - publish_golang:   *workflow_filters
      - publish_php:      *workflow_filters
      - publish_redis:    *workflow_filters
      - publish_postgres: *workflow_filters
      - publish_mariadb:  *workflow_filters
      - publish_mysql:    *workflow_filters
      - publish_mongo:    *workflow_filters
      - publish_elixir:   *workflow_filters
      - publish_jruby:    *workflow_filters
      - publish_clojure:  *workflow_filters
      - publish_openjdk:  *workflow_filters
      - publish_rust:  *workflow_filters
      - publish_buildpack-deps:   *workflow_filters
